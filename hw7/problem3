import math as m
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import scipy.linalg as LA
import csv
from sympy import symbols, diff # use these two lib to make partial derivatives
import os
from mpl_toolkits import mplot3d
import sys
sys.path.append('./NM4P/Python/nm4p/')  #this is required to import a module from outside of the current directory.
										
										
from rk4 import rk4  #this imports rk4 from Garcia's github.  Note the file name 
		    # is rk4 (the first "rk4" here), and we import the "rk4" function
		    # (the second "rk4")

T = m.pi
dt = 1e-2  #time step
tol = 10e-4

def F(X): # X = [r, v]
    r = X[0]
    v = X[1]
    a = -E * r # problem 1
    # a = -E * r**(1/3) @ problem 2
    fx = [v, a]
    fx = np.asarray(fx)
    return fx

def RK4(X0, n, E): # X0 is in the form of [r, v] ; n is number of iterations
    X_list = []
    X_list.append(X0)
    for i in range(n):
        h = m.pi/n
        F1 = h * F(X0)
        F2 = h * F(X0 + 0.5*h*F1)
        F3 = h * F(X0 + 0.5*h*F2)
        F4 = h * F(X0 + h*F3)
        x_next = X0 + h*(F1 + 2*F2 + 2*F3 + F4) / 6
        X0 = x_next
        X_list.append(x_next)
    X_list = np.asarray(X_list)
    return X_list #return a list of [r, v]

def Newton_b(f, Df, x0, err , max_iter):
    xn = x0
    for n in np.arange(max_iter):
        fxn = f(xn)
        if abs(fxn) < err:
            return xn
        dfxn = Df(xn)
        if dfxn == 0:
            return None
        xn = xn - fxn / dfxn
    return None

E = 1e-2 # eigen value
dE = 0.11 # eigen value step
X0 = [0, 1]
X0 = np.asarray(X0)
n = int(T/dt) #number of iteration n
list_b_E = []
list_b_E_plus_dE = []
### part b
for i in np.arange(100):
    list_b_E.append(RK4(X0, n, E)[-1][0]) # The last term of the RK4 list is [x(pi), v(pi)] # b(E)
    b_E = RK4(X0, n, E)[-1][0]
    list_b_E_plus_dE.append(RK4(X0, n, E+dE)[-1][0]) # b(E+dE)
    b_E_plus_dE = RK4(X0, n, E+dE)[-1][0]
    E = E - (b_E * dE)/(b_E_plus_dE - b_E)
    if b_E <= tol:
        print(E)
#print(list_b_E[-1])
