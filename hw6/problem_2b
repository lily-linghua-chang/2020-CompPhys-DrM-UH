# I ran this code on my laptop. it breaks after 1590 iterations
# solving poisson equation 
import numpy as np
import matplotlib.pyplot as plt

#* Initialize parameters (system size, grid spacing, etc.)
N = 101
A=(N+1)/2-1
midd_i = int(A)
L = 2.            # System size (length)
h = L/(N-1)       # Grid spacing
x = np.arange(N)*h   # x coordinate
y = np.arange(N)*h   # y coordinate

#set density of point charge
eps0 = 8.8542e-12    # Permittivity (C^2/(N m^2))
rho = np.zeros((N,N));  # Initialize charge density to zero
r = [0.,0.5]   #position [x, y]
ii=int(r[0]/h + 0.5)    # Place charge at nearest
jj=int(r[1]/h + 0.5)    # grid point
q = 4e-20   #charge density
rho[ii,jj] = q/h**2

#* Set initial guess as first term in separation of variables soln.
phi0 = 1.   
phi = np.empty((N,N))
for i in range(N) :
    for j in range(N) :
        phi[i,j] = phi0 * 4/(np.pi*np.sinh(np.pi)
                            ) * np.sin(np.pi*x[i]/L)*np.sinh(np.pi*y[j]/L)

#* Set the 6 boundary conditions
#reminder for myself ,<slice> = <array>[start_row:end_row, start_col:end_col]

phi[midd_i:N , 0]=0.  #x=0, y=[0,1]
     
phi[midd_i , 0:midd_i]=0. #x=[0,1], y=1

phi[0:midd_i , midd_i]=0.  #x=1, y=[1,2]

phi[midd_i , midd_i:N]=0.  #x=[1,2], y=2
    
phi[:,-1]=0. # x=2,y=[0,2]

phi[-1,:] = np.ones(N) # x=[0,2], y=0


#* Loop until desired fractional change per iteration is obtained
#newphi = np.copy(phi)    # Copy of the solution (used only by Jacobi)
iterMax = N**2           # Set max to avoid excessively long runs
change = np.empty(iterMax)
changeDesired = 1.e-4    # Stop when the change is given fraction
#print 'Desired fractional change = ', changeDesired
for iter in range(iterMax) :
    changeSum = 0  

    #elif method == 2 :    ## Gauss-Seidel method ##
    for i in range(1,N-1) :     # Loop over interior points only
        for j in range(1,N-1) :     
            temp = .25*( phi[i+1,j] + phi[i-1,j] + 
                             phi[i,j-1] + phi[i,j+1] + 1/eps0*h**2*rho[i,j])
            changeSum += abs( 1 - phi[i,j]/temp )
            phi[i,j] = temp


#* Check if fractional change is small enough to halt the iteration
    change[iter] = changeSum/(N-2)**2
    if (iter+1) % 10 < 1 :
        print ("After ", iter+1, " iterations, fractional change = ", change[iter])

    if change[iter] < changeDesired : 
        print ("Desired accuracy achieved after ", iter+1, " iterations")
        print ("Breaking out of main loop")
        break

#* Plot final estimate of potential as a contour plot
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D

levels = np.linspace(0., 1., num=11) 
ct = plt.contour(x, y, np.flipud(np.rot90(phi)), levels) 
plt.clabel(ct, fmt='%1.2f') 
plt.xlabel('x')
plt.ylabel('y')
plt.title('Potential after %g iterations' % iter)
plt.show()

#* Plot final estimate of potential as contour and surface plots

fig = plt.figure()
ax = fig.gca(projection = '3d')
Xp, Yp = np.meshgrid(x, y)
ax.plot_surface(Xp, Yp, np.flipud(np.rot90(phi)), rstride=1, cstride=1, cmap=cm.gray)
ax.view_init(elev=30., azim=210.)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel(r'$\Phi(x,y)$')
plt.show()

