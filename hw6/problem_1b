#  using the Crank-Nicolson scheme
#set N=50,tau=0.1
#D=1. in the plots , density distribuion shifts upward, neutron escapes
#D = 10. and D = 100. nothing is in the plot
#critical mass Lc = pi*squareroot of D/C
#when D is large , Lc is large and L<Lc, neutron density goes to zero at the boundry
# cause the bdry condi imposed in the code is periodic 

import numpy as np
import matplotlib.pyplot as plt

#* Initialize parameters (grid spacing, time step, etc.)
N = int(input('Enter number of grid points: '));
L = 100.                # System extends from -L/2 to L/2, unit is cm
h = L/(N-1)             # Grid size/deltaX
x = np.arange(N)*h - L/2.  # Coordinates  of grid points
C = 1.              # unit is 1/second
D = 1.               # unit is cm**2/second
tau = float(input('Enter time step: '))

#* Set up the Hamiltonian operator matrix
ham = np.zeros((N,N))     
for i in range(1,N-1) :
    ham[i,i-1] = D
    ham[i,i] = -D+C   
    ham[i,i+1] = D

# First and last rows for periodic boundary conditions
ham[0,-1] = D;   ham[0,0] = -D+C;     ham[0,1] = D
ham[-1,-2] = D;  ham[-1,-1] = -D+C;   ham[-1,0] = D

#* Compute the Crank-Nicolson matrix
dCN = np.dot( np.linalg.inv(np.identity(N) + .5*tau*ham), 
             (np.identity(N) - .5*tau*ham) )

#* Initial value of rho_neutron density 
x0 = 0. 
velocity = 0.5
k0 = D*velocity   
sigma0 = L/10.  
Norm_psi = 1./(np.sqrt(sigma0*np.sqrt(np.pi)))   
rho = np.empty(N)
for i in range(N) :
    rho[i] = Norm_psi * np.exp(k0*x[i]) * np.exp(-(x[i]-x0)**2/(2*sigma0**2))
    
#* Plot the initial wavefunction
#plt.plot(x,np.real(psi),'-',x,np.imag(psi),'--')
#plt.xlabel('x');  plt.ylabel(r'$\psi(x)$')
#plt.legend(('Real  ','Imag  '))
#plt.title('Initial wave function')
#plt.show()

#* Initialize loop and plot variables 
max_iter = int(10/tau)       # iterate until T=10s
plot_iter = max_iter/8                    # Produce 8+1 curves
p_plot = np.empty((N,max_iter+1))        
p_plot[:,0] = np.absolute(rho[:])**2      # Record initial condition
iplot = 0
axisV = [-L/2., L/2., 0., max(p_plot[:,0])]   # Fix axis min and max


#* Loop over desired number of steps (wave circles system once)
for iter in range(max_iter) :

    #* Compute new neutron density using the Crank-Nicolson scheme
    rho = np.dot(dCN,rho) 
  
    #* Periodically record values for plotting
    if (iter+1) % plot_iter < 1 :   
        iplot += 1
        p_plot[:,iplot] = np.absolute(rho[:])**2 
        plt.plot(x,p_plot[:,iplot]);     # Display snap-shot of P(x)
        plt.xlabel('x');   plt.ylabel('P(x,t)')
        plt.title('Finished %d of %d iterations' % (iter,max_iter))
        plt.axis(axisV);  plt.show()

